
optiboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00007fce  00000262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ce  00007e00  00007e00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00007ffe  00007ffe  00000262  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stab         00000c54  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d7d  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001c35  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00007e00 <main>:
    7e00:	1f 92       	push	r1
    7e02:	cd b7       	in	r28, 0x3d	; 61
    7e04:	de b7       	in	r29, 0x3e	; 62
    7e06:	11 24       	eor	r1, r1
    7e08:	84 b7       	in	r24, 0x34	; 52
    7e0a:	14 be       	out	0x34, r1	; 52
    7e0c:	98 2f       	mov	r25, r24
    7e0e:	9d 70       	andi	r25, 0x0D	; 13
    7e10:	09 f0       	breq	.+2      	; 0x7e14 <main+0x14>
    7e12:	d7 d0       	rcall	.+430    	; 0x7fc2 <appStart>
    7e14:	85 e0       	ldi	r24, 0x05	; 5
    7e16:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    7e1a:	82 e0       	ldi	r24, 0x02	; 2
    7e1c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7e20:	88 e1       	ldi	r24, 0x18	; 24
    7e22:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    7e26:	86 e0       	ldi	r24, 0x06	; 6
    7e28:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    7e2c:	87 e6       	ldi	r24, 0x67	; 103
    7e2e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    7e32:	8e e0       	ldi	r24, 0x0E	; 14
    7e34:	b1 d0       	rcall	.+354    	; 0x7f98 <watchdogConfig>
    7e36:	25 9a       	sbi	0x04, 5	; 4
    7e38:	86 e0       	ldi	r24, 0x06	; 6
    7e3a:	20 e3       	ldi	r18, 0x30	; 48
    7e3c:	3c ef       	ldi	r19, 0xFC	; 252
    7e3e:	91 e0       	ldi	r25, 0x01	; 1
    7e40:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    7e44:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    7e48:	96 bb       	out	0x16, r25	; 22
    7e4a:	b0 9b       	sbis	0x16, 0	; 22
    7e4c:	fe cf       	rjmp	.-4      	; 0x7e4a <main+0x4a>
    7e4e:	1d 9a       	sbi	0x03, 5	; 3
    7e50:	a8 95       	wdr
    7e52:	81 50       	subi	r24, 0x01	; 1
    7e54:	a9 f7       	brne	.-22     	; 0x7e40 <main+0x40>
    7e56:	81 2c       	mov	r8, r1
    7e58:	91 2c       	mov	r9, r1
    7e5a:	13 e0       	ldi	r17, 0x03	; 3
    7e5c:	01 e0       	ldi	r16, 0x01	; 1
    7e5e:	25 e0       	ldi	r18, 0x05	; 5
    7e60:	f2 2e       	mov	r15, r18
    7e62:	31 e1       	ldi	r19, 0x11	; 17
    7e64:	e3 2e       	mov	r14, r19
    7e66:	8c d0       	rcall	.+280    	; 0x7f80 <getch>
    7e68:	81 34       	cpi	r24, 0x41	; 65
    7e6a:	79 f4       	brne	.+30     	; 0x7e8a <main+0x8a>
    7e6c:	89 d0       	rcall	.+274    	; 0x7f80 <getch>
    7e6e:	89 83       	std	Y+1, r24	; 0x01
    7e70:	99 d0       	rcall	.+306    	; 0x7fa4 <verifySpace>
    7e72:	89 81       	ldd	r24, Y+1	; 0x01
    7e74:	82 38       	cpi	r24, 0x82	; 130
    7e76:	11 f4       	brne	.+4      	; 0x7e7c <main+0x7c>
    7e78:	82 e0       	ldi	r24, 0x02	; 2
    7e7a:	05 c0       	rjmp	.+10     	; 0x7e86 <main+0x86>
    7e7c:	81 38       	cpi	r24, 0x81	; 129
    7e7e:	11 f4       	brne	.+4      	; 0x7e84 <main+0x84>
    7e80:	86 e0       	ldi	r24, 0x06	; 6
    7e82:	01 c0       	rjmp	.+2      	; 0x7e86 <main+0x86>
    7e84:	83 e0       	ldi	r24, 0x03	; 3
    7e86:	75 d0       	rcall	.+234    	; 0x7f72 <putch>
    7e88:	71 c0       	rjmp	.+226    	; 0x7f6c <main+0x16c>
    7e8a:	82 34       	cpi	r24, 0x42	; 66
    7e8c:	11 f4       	brne	.+4      	; 0x7e92 <main+0x92>
    7e8e:	84 e1       	ldi	r24, 0x14	; 20
    7e90:	03 c0       	rjmp	.+6      	; 0x7e98 <main+0x98>
    7e92:	85 34       	cpi	r24, 0x45	; 69
    7e94:	19 f4       	brne	.+6      	; 0x7e9c <main+0x9c>
    7e96:	85 e0       	ldi	r24, 0x05	; 5
    7e98:	8d d0       	rcall	.+282    	; 0x7fb4 <getNch>
    7e9a:	68 c0       	rjmp	.+208    	; 0x7f6c <main+0x16c>
    7e9c:	85 35       	cpi	r24, 0x55	; 85
    7e9e:	49 f4       	brne	.+18     	; 0x7eb2 <main+0xb2>
    7ea0:	6f d0       	rcall	.+222    	; 0x7f80 <getch>
    7ea2:	d8 2e       	mov	r13, r24
    7ea4:	6d d0       	rcall	.+218    	; 0x7f80 <getch>
    7ea6:	8d 2c       	mov	r8, r13
    7ea8:	91 2c       	mov	r9, r1
    7eaa:	98 2a       	or	r9, r24
    7eac:	88 0c       	add	r8, r8
    7eae:	99 1c       	adc	r9, r9
    7eb0:	5c c0       	rjmp	.+184    	; 0x7f6a <main+0x16a>
    7eb2:	86 35       	cpi	r24, 0x56	; 86
    7eb4:	21 f4       	brne	.+8      	; 0x7ebe <main+0xbe>
    7eb6:	84 e0       	ldi	r24, 0x04	; 4
    7eb8:	7d d0       	rcall	.+250    	; 0x7fb4 <getNch>
    7eba:	80 e0       	ldi	r24, 0x00	; 0
    7ebc:	e4 cf       	rjmp	.-56     	; 0x7e86 <main+0x86>
    7ebe:	84 36       	cpi	r24, 0x64	; 100
    7ec0:	09 f0       	breq	.+2      	; 0x7ec4 <main+0xc4>
    7ec2:	36 c0       	rjmp	.+108    	; 0x7f30 <main+0x130>
    7ec4:	5d d0       	rcall	.+186    	; 0x7f80 <getch>
    7ec6:	5c d0       	rcall	.+184    	; 0x7f80 <getch>
    7ec8:	d8 2e       	mov	r13, r24
    7eca:	5a d0       	rcall	.+180    	; 0x7f80 <getch>
    7ecc:	c8 2e       	mov	r12, r24
    7ece:	a1 2c       	mov	r10, r1
    7ed0:	bb 24       	eor	r11, r11
    7ed2:	b3 94       	inc	r11
    7ed4:	55 d0       	rcall	.+170    	; 0x7f80 <getch>
    7ed6:	f5 01       	movw	r30, r10
    7ed8:	81 93       	st	Z+, r24
    7eda:	5f 01       	movw	r10, r30
    7edc:	de 12       	cpse	r13, r30
    7ede:	fa cf       	rjmp	.-12     	; 0x7ed4 <main+0xd4>
    7ee0:	61 d0       	rcall	.+194    	; 0x7fa4 <verifySpace>
    7ee2:	f5 e4       	ldi	r31, 0x45	; 69
    7ee4:	cf 12       	cpse	r12, r31
    7ee6:	01 c0       	rjmp	.+2      	; 0x7eea <main+0xea>
    7ee8:	ff cf       	rjmp	.-2      	; 0x7ee8 <main+0xe8>
    7eea:	f4 01       	movw	r30, r8
    7eec:	17 bf       	out	0x37, r17	; 55
    7eee:	e8 95       	spm
    7ef0:	07 b6       	in	r0, 0x37	; 55
    7ef2:	00 fc       	sbrc	r0, 0
    7ef4:	fd cf       	rjmp	.-6      	; 0x7ef0 <main+0xf0>
    7ef6:	a4 01       	movw	r20, r8
    7ef8:	a0 e0       	ldi	r26, 0x00	; 0
    7efa:	b1 e0       	ldi	r27, 0x01	; 1
    7efc:	2c 91       	ld	r18, X
    7efe:	12 96       	adiw	r26, 0x02	; 2
    7f00:	cd 01       	movw	r24, r26
    7f02:	01 97       	sbiw	r24, 0x01	; 1
    7f04:	fc 01       	movw	r30, r24
    7f06:	80 81       	ld	r24, Z
    7f08:	30 e0       	ldi	r19, 0x00	; 0
    7f0a:	38 2b       	or	r19, r24
    7f0c:	fa 01       	movw	r30, r20
    7f0e:	09 01       	movw	r0, r18
    7f10:	07 bf       	out	0x37, r16	; 55
    7f12:	e8 95       	spm
    7f14:	11 24       	eor	r1, r1
    7f16:	4e 5f       	subi	r20, 0xFE	; 254
    7f18:	5f 4f       	sbci	r21, 0xFF	; 255
    7f1a:	da 12       	cpse	r13, r26
    7f1c:	ef cf       	rjmp	.-34     	; 0x7efc <main+0xfc>
    7f1e:	f4 01       	movw	r30, r8
    7f20:	f7 be       	out	0x37, r15	; 55
    7f22:	e8 95       	spm
    7f24:	07 b6       	in	r0, 0x37	; 55
    7f26:	00 fc       	sbrc	r0, 0
    7f28:	fd cf       	rjmp	.-6      	; 0x7f24 <main+0x124>
    7f2a:	e7 be       	out	0x37, r14	; 55
    7f2c:	e8 95       	spm
    7f2e:	1e c0       	rjmp	.+60     	; 0x7f6c <main+0x16c>
    7f30:	84 37       	cpi	r24, 0x74	; 116
    7f32:	71 f4       	brne	.+28     	; 0x7f50 <main+0x150>
    7f34:	25 d0       	rcall	.+74     	; 0x7f80 <getch>
    7f36:	24 d0       	rcall	.+72     	; 0x7f80 <getch>
    7f38:	d8 2e       	mov	r13, r24
    7f3a:	22 d0       	rcall	.+68     	; 0x7f80 <getch>
    7f3c:	33 d0       	rcall	.+102    	; 0x7fa4 <verifySpace>
    7f3e:	54 01       	movw	r10, r8
    7f40:	f5 01       	movw	r30, r10
    7f42:	85 91       	lpm	r24, Z+
    7f44:	5f 01       	movw	r10, r30
    7f46:	15 d0       	rcall	.+42     	; 0x7f72 <putch>
    7f48:	da 94       	dec	r13
    7f4a:	d1 10       	cpse	r13, r1
    7f4c:	f9 cf       	rjmp	.-14     	; 0x7f40 <main+0x140>
    7f4e:	0e c0       	rjmp	.+28     	; 0x7f6c <main+0x16c>
    7f50:	85 37       	cpi	r24, 0x75	; 117
    7f52:	39 f4       	brne	.+14     	; 0x7f62 <main+0x162>
    7f54:	27 d0       	rcall	.+78     	; 0x7fa4 <verifySpace>
    7f56:	8e e1       	ldi	r24, 0x1E	; 30
    7f58:	0c d0       	rcall	.+24     	; 0x7f72 <putch>
    7f5a:	85 e9       	ldi	r24, 0x95	; 149
    7f5c:	0a d0       	rcall	.+20     	; 0x7f72 <putch>
    7f5e:	8f e0       	ldi	r24, 0x0F	; 15
    7f60:	92 cf       	rjmp	.-220    	; 0x7e86 <main+0x86>
    7f62:	81 35       	cpi	r24, 0x51	; 81
    7f64:	11 f4       	brne	.+4      	; 0x7f6a <main+0x16a>
    7f66:	88 e0       	ldi	r24, 0x08	; 8
    7f68:	17 d0       	rcall	.+46     	; 0x7f98 <watchdogConfig>
    7f6a:	1c d0       	rcall	.+56     	; 0x7fa4 <verifySpace>
    7f6c:	80 e1       	ldi	r24, 0x10	; 16
    7f6e:	01 d0       	rcall	.+2      	; 0x7f72 <putch>
    7f70:	7a cf       	rjmp	.-268    	; 0x7e66 <main+0x66>

00007f72 <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    7f72:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7f76:	95 ff       	sbrs	r25, 5
    7f78:	fc cf       	rjmp	.-8      	; 0x7f72 <putch>
  UART_UDR = ch;
    7f7a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    7f7e:	08 95       	ret

00007f80 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    7f80:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7f84:	87 ff       	sbrs	r24, 7
    7f86:	fc cf       	rjmp	.-8      	; 0x7f80 <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    7f88:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7f8c:	84 fd       	sbrc	r24, 4
    7f8e:	01 c0       	rjmp	.+2      	; 0x7f92 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7f90:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
    7f92:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    7f96:	08 95       	ret

00007f98 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7f98:	e0 e6       	ldi	r30, 0x60	; 96
    7f9a:	f0 e0       	ldi	r31, 0x00	; 0
    7f9c:	98 e1       	ldi	r25, 0x18	; 24
    7f9e:	90 83       	st	Z, r25
  WDTCSR = x;
    7fa0:	80 83       	st	Z, r24
    7fa2:	08 95       	ret

00007fa4 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    7fa4:	ed df       	rcall	.-38     	; 0x7f80 <getch>
    7fa6:	80 32       	cpi	r24, 0x20	; 32
    7fa8:	19 f0       	breq	.+6      	; 0x7fb0 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    7faa:	88 e0       	ldi	r24, 0x08	; 8
    7fac:	f5 df       	rcall	.-22     	; 0x7f98 <watchdogConfig>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
    7fae:	ff cf       	rjmp	.-2      	; 0x7fae <verifySpace+0xa>
  }
  putch(STK_INSYNC);
    7fb0:	84 e1       	ldi	r24, 0x14	; 20
    7fb2:	df cf       	rjmp	.-66     	; 0x7f72 <putch>

00007fb4 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7fb4:	cf 93       	push	r28
    7fb6:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    7fb8:	e3 df       	rcall	.-58     	; 0x7f80 <getch>
    7fba:	c1 50       	subi	r28, 0x01	; 1
    7fbc:	e9 f7       	brne	.-6      	; 0x7fb8 <getNch+0x4>
  verifySpace();
}
    7fbe:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    7fc0:	f1 cf       	rjmp	.-30     	; 0x7fa4 <verifySpace>

00007fc2 <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    7fc2:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    7fc4:	80 e0       	ldi	r24, 0x00	; 0
    7fc6:	e8 df       	rcall	.-48     	; 0x7f98 <watchdogConfig>
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__ (
    7fc8:	e0 e0       	ldi	r30, 0x00	; 0
    7fca:	ff 27       	eor	r31, r31
    7fcc:	09 94       	ijmp
